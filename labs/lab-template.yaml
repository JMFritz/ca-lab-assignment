AWSTemplateFormatVersion: 2010-09-09
Description: "CA Lab assignment template."

Parameters:
  User:
    Default: student
    Type: String

Resources:

  #Lab Student IAM Role
  LabStudentRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:user/${User}'
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: 'LabStudentPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - iam:ListRoles
                  - lambda:GetAccountSettings
                  - lambda:ListFunctions
                  - lambda:DeleteFunction
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:GetLogEvents
                  - logs:FilterLogEvents
                  - s3:ListAllMyBuckets
                  - cloudformation:ListStacks
                  - cloudformation:DescribeStacks
                  - cloudformation:GetTemplate
                Resource: "*"
              - Effect: Allow
                Action: 
                  - iam:PassRole
                Resource: 'arn:aws:iam::*:role/*PutObjectExecRole-*'
              - Effect: Allow
                Action:
                  - lambda:CreateFunction
                  - lambda:InvokeFunction
                  - lambda:GetFunction
                  - lambda:UpdateFunctionCode
                  - lambda:GetFunctionConfiguration
                  - lambda:UpdateFunctionConfiguration
                  - lambda:GetPolicy
                Resource: !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:PutObjectFunction'
              - Effect: Allow
                Action: 
                  - s3:ListBucket
                Resource: !Sub 'arn:aws:s3:::${Bucket}'
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource: !Sub 'arn:aws:s3:::${Bucket}/*'

  # S3 bucket to serve as Lab Lambda function destination.
  Bucket:
    Type: AWS::S3::Bucket
  
  # Lab Lambda execution role scoped to a single action on the Lab bucket only.
  PutObjectExecRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: 'ScopedLoggingPolicy'
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*'
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/PutObjectFunction:*'
        - PolicyName: 'PutObjectExecPolicy'
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                Resource: !Sub 'arn:aws:s3:::${Bucket}/*'

# CheckBucket Lambda Function + Execution Role
    
  CheckBucketExecRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: 'CheckBucketExecPolicy'
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource: !Sub 'arn:aws:s3:::${Bucket}'

  CheckBucket:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Runtime: nodejs12.x
      Role: !GetAtt CheckBucketExecRole.Arn
      Environment:
        Variables:
          BUCKET_NAME: !Ref Bucket
      Code:
        ZipFile: |
          // Load AWS SDK and create a new S3 object
          const AWS = require('aws-sdk');
          const s3 = new AWS.S3();
          const bucketName = process.env.BUCKET_NAME; // Reference Lambda environment variable

          exports.handler = async event => {
            try {
              // Construct parameters for the listObjects() call
              const params = {
                Bucket: bucketName,
                MaxKeys: 1
              };
              
              let message;
              
              // Call listObjects() + respond with success string
              const response = await s3.listObjects(params).promise();
              
              // Check Contents count
              if (response.Contents.length < 1){
                message = 'Lab Check Failed... No object placed in S3 bucket';
              } else {
                message = 'Lab Check Successful!';
              }
              
              return message;
            } catch (err) {
                console.log(err);
            }
          };

# CheckFunction Lambda Function + Execution Role

  CheckFunctionExecRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: 'CheckFunctionExecPolicy'
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - lambda:GetFunction
                Resource: '*'

  CheckFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Runtime: nodejs12.x
      Role: !GetAtt CheckFunctionExecRole.Arn
      Environment:
        Variables:
          FUNCTION_NAME: 'PutObjectFunction'
      Code:
        ZipFile: |
          // Load AWS SDK and create a new lambda object
          const AWS = require('aws-sdk');
          const lambda = new AWS.Lambda();
          const functionName = process.env.FUNCTION_NAME;

          exports.handler = async event => {
            try {
              // Construct parameters for getFunction()
              const params = {
                FunctionName: functionName
              };
              
              // Call getFunction() + respond with success string
              await lambda.getFunction(params).promise();
              return 'Lab Check Successful!';
              
            } catch (err) {
                // Failed result for resource not found
                if (err.code == 'ResourceNotFoundException') {
                  return 'Lab Check Failed... ' + functionName + ' does not exist.';
                } else {
                  console.log(err);
                }
            }
          };

Outputs:
  Bucket:
    Description: Lab bucket name
    Value: !Ref Bucket


